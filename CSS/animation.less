// 加载完成状态
@default_set: 				.5s;
// 页面加载完
@onload_dark_duration: 		3s;
// 亮灯时长
@Lights_up_duration: 		3s;
// 大灯亮灯时长
@Lights_up_duration_fast: 	1s;

// 起步预备
@ready_duration: 			1s;

// 第1次加速时长
@speed_1_duration: 			8s;

// 第2次加速时长
@speed_2_duration: 			2s;

// 基础车速
@basic_speed: 				1s;

// 起步
@engine_starts: 			1s;	

// 道路长度
@road_length:               3000px;		

// ui变形基础时间
@ui_deformation:            1s;							





.default_set{
	div{
		transition: 
			filter 		@onload_dark_duration,
			transform 	@onload_dark_duration,
			opacity 	@onload_dark_duration;

		transition-timing-function: linear;
		transition-delay: @default_set;

	}

	.dashboard{
		transition: 
			filter 		@ui_deformation,
			transform 	@ui_deformation,
			opacity 	@ui_deformation;
	}


	.doorB{
		transition: 
			transform 	@Lights_up_duration;
		transform-origin:97.88% 100%;
		transition-timing-function: cubic-bezier(0.65, 0.01, 0.35, 0.99);
		transition-delay: 0s;
		
	}

	.doorA{
		transition: 
			transform 	@Lights_up_duration;
		transform-origin:92.12% 42.15%;
		transition-timing-function: cubic-bezier(0.02, 0.7, 0.94, 0.27);
		// display: none;
		transition-delay: 1s;
	}

	.car_bright{
		// display: none;
		opacity: 0;
	}


	.road{
		display: none;
	}

	.bg{
		display: none;
	}

	// 亮度参数，兼容不好
	.bg_dark,.car_dark,.door{
		filter: brightness(.1);
	}

	.door{
		.bright{
			opacity: 0;
		}
	}

	.brake_light{
		display: none;
	}

	.headlight{
		display: none;
	}

	.bg{
		transform: translate(0%, 1%) scale(1.2, 1.2);
	}

	.car{
		.bright{
			transition: 
				filter 		@engine_starts,
				transform 	@engine_starts,
				opacity 	@engine_starts;

			transition-timing-function: linear;
		}
	}



}




.onload_dark{
	.bg_dark,.car_dark,.door{
		filter: brightness(1);
		transition-property: filter, transform, opacity;
    	transition-duration: @ready_duration * 2, @ready_duration, @ready_duration / 2;
    	transition-timing-function: cubic-bezier(0, 1.16, 1, 1);
	}

	.headlight{
		display: block;
		// animation-delay: @onload_dark_duration;
		animation-name: headlight;
	}

	.road{
		opacity: 0;
		filter: brightness(1.5);
		display: block;
		transition-property: filter, transform, opacity;
    	transition-duration: @ready_duration * 2, @ready_duration, @ready_duration / 2;
    	transition-timing-function: cubic-bezier(0, 1.16, 1, 1);
	}


}

.Lights_up{

	.doorB{
		transform: translateX(-5%) rotateZ(-86deg);
		transition-delay: 1s;
	}

	.doorA{
		transform: rotateZ(26deg);
		transition-delay: 1s;
	}
	
	.bg_dark{
		
		opacity: 0;
		transition: 
			filter 		@Lights_up_duration_fast,
			transform 	@Lights_up_duration_fast,
			opacity 	@Lights_up_duration_fast;
		transition-delay: .2s;
	}

	.bg{
		display: block;
		transition: 
			filter 		@Lights_up_duration_fast,
			transform 	@Lights_up_duration_fast,
			opacity 	@Lights_up_duration_fast;
		transition-delay: .2s;
		
		opacity: 1;
	}

	.car_dark{
		opacity: 0;
	}

	.car_bright{
		display: block;
		transition: 
			filter 		@Lights_up_duration_fast,
			transform 	@Lights_up_duration_fast,
			opacity 	@Lights_up_duration_fast;
		transition-delay: .1s;
		opacity: 1;
	}

	.door{
		.dark{
			// opacity: 0;
		}

		.bright{
			display: block;
			transition: 
				filter 		@Lights_up_duration_fast,
				transform 	@Lights_up_duration_fast,
				opacity 	@Lights_up_duration_fast;
			transition-delay: .1s;
			opacity: 1;
		}
	}

	.road{
		opacity: 1;
		filter: brightness(1);
	}


	.track_loop{
		transition: 
				filter 		@Lights_up_duration,
				transform 	@Lights_up_duration,
				opacity 	@Lights_up_duration;
		
		//先等待关门
		transition-delay: @Lights_up_duration;
		// 引擎启动，道路从慢到快跑第一个循环
		transform: translate(0px,0%);
		// 接入完整道路动画循环
		animation-name: track_loop;
		// 完整道路循环的延迟时间，关车门+第一个循环
		animation-delay: @Lights_up_duration + @Lights_up_duration;
		// 动画曲线要缓入！！
		transition-timing-function: cubic-bezier(0.49, 0.01, 1, 1);

		// animation-name: track_loop;
		animation-duration: @basic_speed;
		animation-timing-function: linear;
		animation-iteration-count: infinite;
		animation-direction: normal;
		// animation-play-state: running;
		// animation-fill-mode : none | forwards | backwards | both;
		animation-fill-mode : none;

	}

	.headlight{
		// 引擎启动亮一次灯
		animation-name:engine_starts_headlight;
		animation-delay:@Lights_up_duration + 1 ;
	}

	.triangle{
		div{

			transition-delay: @Lights_up_duration;


			animation-name: triangle;
			animation-duration: @basic_speed * 3;
			animation-timing-function: linear;
			// animation-delay: 2s;
			animation-iteration-count: infinite;
			animation-direction: normal;
			animation-play-state: running;
			// animation-fill-mode : none | forwards | backwards | both;
			// animation-fill-mode : both;

			 transition-timing-function: cubic-bezier(0.49, 0.01, 1, 1);


			
		}

		.triangle_1{
			transition-duration: @Lights_up_duration * 1;
			transform: translate3d( 0px, 0px, (0 - @road_length) );
			opacity: 0;
			animation-delay: @Lights_up_duration + @Lights_up_duration + 0s;
		}
		.triangle_2{
			transition-duration: @Lights_up_duration * 0.66666;
			transform: translate3d( 0px, 0px, (0 - @road_length) );
			opacity: 0;
			animation-delay:@Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.333333;
		}
		.triangle_3{
			transition-duration: @Lights_up_duration * 0.33333;
			transform: translate3d( 0px, 0px, (0 - @road_length) );
			opacity: 0;
			animation-delay: @Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.666666;
		}


	}

	.car{
		transition-delay: @speed_1_duration / 2;
		transition-timing-function: cubic-bezier(0, 0, 0.31, 1);
		transform: translate(0%,-10%) scale(.8,.8);
	}

	.brake_light{
		display: block;
		animation-name:headlight;
		animation-delay:@Lights_up_duration - 1 ;
		animation-duration: @Lights_up_duration - 1;
		animation-timing-function: linear;
		animation-iteration-count: 1;
		animation-direction: normal;
		animation-play-state: running;
		animation-fill-mode : both;
	}

	.dashboard{
		opacity: 0;
		display: block;
	}

	li.speeded_up_bg{
		display: block;
	}

	li.accelerator{
		display: block;
	}
		
	
}

.ready{
	.dashboard{
		opacity: 1;
	}

	.shell{
		opacity: 0;
		display: block;
	}



	.speeded_up_ring{
		transform: translate(0%, 0%) scale(1, 1);
		transition-timing-function: cubic-bezier(0, 0, 0.31, 0.99);
		
		img{
			animation-name: clockwise;
			animation-duration: @basic_speed * 4;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
			animation-delay: 0s;
			animation-direction: normal;
		}
		
	}

	li.button_text,li.challenge_text{
		display: block;
		opacity: 1;
	}

	//为点击准备；
	li.intter_ring{
		opacity: 0;
		display: block;
		transform: scale(0.8, 0.8);
		transition: 
			filter 		@ui_deformation,
			transform 	@ui_deformation,
			opacity 	@ui_deformation;
		transition-timing-function: cubic-bezier(0, 0, 0.31, 0.99);
		div{
			animation-name: clockwise;
			animation-duration: @basic_speed*4;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
			animation-delay: 0s;
			animation-direction: normal;
		}



	}
	
	li.speed_1_scale{
		opacity: 0;
		display: block;
		transform: scale(0.8, 0.8);
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@ui_deformation / 2,
			opacity 	@ui_deformation / 4;
		transition-timing-function: cubic-bezier(0, 0, 0.31, 0.99);
	}

	li.speed_1_pointer{
		opacity: 0;
		display: block;
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_1_duration,
			opacity 	@ui_deformation / 4;
		transition-timing-function: ease-in-out;
	}

	li.outer_ring{
		opacity: 0;
		display: block;
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_1_duration,
			opacity 	@ui_deformation / 4;
		transition-timing-function: cubic-bezier(0.79, 0.08, 1, 1);

		div{
			animation-name: anticlockwise;
			animation-duration: @basic_speed * 4;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
			animation-delay: 0s;
			animation-direction: normal;
		}
	}

	.shell{
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@ui_deformation / 6,
			opacity 	@ui_deformation / 4;
		transform: translate(0%, 0%) scale(.8, .8);
	}
}

.speed_1{

	.bg{
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_1_duration+@speed_2_duration,
			opacity 	@ui_deformation / 4;
		transform: translate(0%, 0%) scale(1, 1);


	}

	.car{
		.door{
			display: none;
		}
	}

	li.intter_ring{
		opacity: 1;
		transform: rotate(0deg) scale(1, 1);
		

	}
	
	li.speed_1_scale{
		opacity: 1;
		transform: translate(0%, 0%) scale(1, 1);
		
	}

	li.speed_1_pointer{
		opacity: 1;
		
		
	}

	li.outer_ring{
		opacity: 1;
		transform: rotate(0deg) scale(0.9, 0.9);

	}

	.shell{
		opacity: 1;
	}

	.title{
		display: none;
	}

	.score{
		display: block;
		animation-name: score;
		animation-duration: @speed_1_duration+@speed_2_duration;
		animation-timing-function: linear;
		animation-delay: .2s;
		animation-iteration-count: 1;
		animation-direction: normal;
		animation-play-state: running;
		// animation-fill-mode : none | forwards | backwards | both;
		animation-fill-mode : both;

	}

	li.speed_2_scale{
		display: block;
		opacity: 0;
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@ui_deformation / 4,
			opacity 	@ui_deformation / 4;
		transform: rotate(-155deg) scale(0.5,0.5);
	}
	li.speed_2_pointer{
		display: block;
		opacity: 0;
		transform: rotate(-155deg) scale(0.8,0.8);
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_1_duration,
			opacity 	@ui_deformation / 4;
	}

	.triangle{
		div{
			animation-duration: (@basic_speed * 3) / 2;
		}
		.triangle_1{
			animation-delay: (@Lights_up_duration + @Lights_up_duration + 0s) / 2;
		}
		.triangle_2{
			animation-delay:(@Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.333333) / 2;
		}
		.triangle_3{
			animation-delay: (@Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.666666) / 2;
		}
	}

	.car{
		transition-delay: 0s;
	}
	

	.headlight{
		animation-name: none;
		animation-delay: 0s;
		animation-duration: 1s;
		animation-fill-mode : both;
		display: none;
	}

	.brake_light{
		animation-name: headlight;
		animation-duration: 1s;
		animation-delay: 0s;
		animation-fill-mode : both;
	}
	

	


}

.speed_1.accelerate{
	li.speed_1_pointer{
		transform: rotate(102deg);
	}

	li.outer_ring{
		transform: rotate((-720deg)) scale(1.1, 1.1);
	}

	li.intter_ring{
		transform: rotate((180deg)) scale(.9, .9);
	}

	li.speed_1_scale{
		transform: rotate(0deg) scale(1.05, 1.05);
	}

	.car{
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_1_duration,
			opacity 	@ui_deformation / 4;
		transform: translate(0%, -8%) scale(0.9, 0.9);
		transition-delay: 0s;
	}

	.headlight{
		animation-name: headlight;
		animation-duration: 2s;
		display: block;
	}

	.brake_light{
		animation-name: none;
		animation-delay: 0s;
		opacity: 0;
		display: none;
	}

	.car{
		.bright{

			transform: translate(0%,2%) scale(1.03, 1.03) ;
			// animation-name: vibration;
			// animation-duration:.1s;
			// animation-iteration-count:1;
			// animation-timing-function: linear;
			// animation-delay: 0s;
			// animation-direction: alternate;
		}
	}





		
	
}

.speed_2{
	li.speed_1_scale{
		transform: rotate(90deg) scale(.75,.75);
	}

	li.speed_1_pointer{
		opacity: 0;
	}

	li.speed_2_scale{
		opacity: 1;
		transform: rotate(0deg) scale(1,1);
	}

	li.speed_2_pointer{
		opacity: 1;
	}

	li.outer_ring{

		transition: 
			filter 		@ui_deformation / 4,
			transform 	@ui_deformation / 4,
			opacity 	@ui_deformation / 4;


		div{
			animation-name: anticlockwise;
			animation-duration: @basic_speed * 2;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
			animation-delay: 0s;
			animation-direction: normal;
		}
	}

	li.intter_ring{
		div{
			animation-name: clockwise;
			animation-duration: @basic_speed*2;
			animation-iteration-count: infinite;
			animation-timing-function: linear;
			animation-delay: 0s;
			animation-direction: normal;
		}

	}

	.triangle{
		div{
			animation-duration: (@basic_speed * 3) / 4;
		}
		.triangle_1{
			animation-delay: (@Lights_up_duration + @Lights_up_duration + 0s) / 4;
		}
		.triangle_2{
			animation-delay:(@Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.333333) / 4;
		}
		.triangle_3{
			animation-delay: (@Lights_up_duration + @Lights_up_duration + (@basic_speed * 3) * 0.666666) / 4;
		}
	}



}

.speed_2.accelerate{
	li.speed_1_scale{
		transform: rotate(90deg) scale(.75,.75);
	}

	li.speed_2_pointer{
		transform: rotate(-10deg) scale(1,1);
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_2_duration,
			opacity 	@ui_deformation / 4;
	}

	li.outer_ring{
		transform: rotate(0deg) scale(0.8, 0.8);
	}

	.car{
		transition: 
			filter 		@ui_deformation / 4,
			transform 	@speed_2_duration,
			opacity 	@ui_deformation / 4;
		transform: translate(0%, -5%) scale(1, 1);
		transition-delay: 0s;
	}

}





///////////////////////////////////////////////////////



@keyframes triangle {
	0% { transform: translate3d(0px, 0px, 300px); opacity: 1}
	70% {opacity: 1;	}
	100% { transform: translate3d(0px, 0px, (0 - @road_length));opacity: 0; }
}


@keyframes track_loop {
	from { transform: translate(0px,25%); }
	to { transform: translate(0px,0%); }
}
// 圆心测试动画



.test{
	animation-name: test;
	animation-duration: 1s;
	animation-timing-function: linear;
	// animation-delay: 2s;
	animation-iteration-count: infinite;
	animation-direction: normal;
	animation-play-state: running;
	// animation-fill-mode : none | forwards | backwards | both;
	animation-fill-mode : both;
}

@keyframes test {
	from { transform: rotateX(0deg) }
	to { transform: rotateX(360deg) }
}


// 大灯动画
.headlight{

	animation-duration: 3s;
	animation-timing-function: linear;
	// animation-delay: 2s;
	animation-iteration-count: 1;
	animation-direction: normal;
	animation-play-state: running;
	// animation-fill-mode : none | forwards | backwards | both;
	animation-fill-mode : both;
}



@keyframes headlight {
	0% 	{opacity: 0;}
	5% {opacity: 1;}
	50% {opacity: 1;}
	100% {opacity: 0;  }
}



@keyframes engine_starts_headlight {
	0% 	{opacity: 0;}
	5% {opacity: 1;}
	50% {opacity: 1;}
	100% {opacity: 0;  }
}


//顺时针
@keyframes clockwise {
	from { transform: rotate(0deg) }
	to { transform: rotate(360deg) }
}


// 逆时针
@keyframes anticlockwise {
	from { transform: rotate(0deg) }
	to { transform: rotate(-360deg) }
}


@keyframes score {
	0% 	 { transform: scale(1, 0) }
	1% 	 { transform: scale(1, 1) }
	100% { transform: scale(1.3, 1.3) }
}





@keyframes vibration {
	0% { transform: translate(0%,0%) }
	100% { transform: translate(0%,.5%) }
}











